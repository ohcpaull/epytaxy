def unit_vector(vector):
    """ Returns the unit vector of the vector.  """
    return vector / np.linalg.norm(vector)

def angle_between(v1, v2):
    """ Returns the angle in radians between vectors 'v1' and 'v2'::

            >>> angle_between((1, 0, 0), (0, 1, 0))
            1.5707963267948966
            >>> angle_between((1, 0, 0), (1, 0, 0))
            0.0
            >>> angle_between((1, 0, 0), (-1, 0, 0))
            3.141592653589793
    """
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)
    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))

def make_cyl_endpt(name, start_point, end_point, radius=1, res=16, rot=(0,0,0)):
    """
    Creates primitive blender cylinder based off the specified start and end points
    
    Parameters
    ----------
    name : str
        Name of object
    start_point : 3-tuple of float
        3D coordinates of the start-point of the cylinder
    end_point : 3-tuple of float
        3D coordinates of the end-point of the cylinder
    radius : float, optional
        radius of cylinder
    res : int, optional
        number of vertices in the cylinder
    """ 
    (xi, yi, zi) = start_point
    (xf, yf, zf) = end_point
    cylinder_vector = (xf - xi, yf - yi, zf - zi)
    length = np.sqrt((xf - xi)**2 + (yf - yi)**2 + (zf - zi)**2)
    pos = ((xf - xi) / 2, (yf - yi) / 2, (zf - zi) / 2)
    
    # Rotate cylinder around y, then around z to achieve correct orientation
    y_rot = angle_between((0,0,1), cylinder_vector) # angle between Z and cylinder
    z_rot= angle_between((1,0,0), (xf - xi, yf - yi, 0)) # angle between X and projection of cylinder in XY plane

    result = bpy.ops.mesh.primitive_cylinder_add(
        vertices=res, 
        radius=radius, 
        depth=length, 
        location=pos, 
        rotation=(0, y_rot, z_rot)
    )#, cap_ends=True)
                    
    obj = bpy.context.object
    obj.name = name
    mesh = obj.data
        
    obj.name = f"{name}_{pos[0]:.1f}_{pos[1]:.1f}_{pos[2]:.1f}"

    obj.location = (float(pos[0]),float(pos[1]),float(pos[2]))

    return obj, mesh